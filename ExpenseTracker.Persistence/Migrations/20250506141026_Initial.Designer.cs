// <auto-generated />
using System;
using ExpenseTracker.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExpenseTracker.Persistence.Migrations
{
    [DbContext(typeof(ExpenseTrackerDbContext))]
    [Migration("20250506141026_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long>("AccountNumber")
                        .HasColumnType("bigint")
                        .HasColumnName("account_number");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTimeOffset?>("CloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("close_date");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<string>("IBAN")
                        .HasColumnType("text")
                        .HasColumnName("iban");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_date");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_accounts_user_id");

                    b.ToTable("accounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("79e18995-ac9a-4d16-848b-40d0b48df92c"),
                            AccountNumber = 134268590L,
                            Balance = 1000000m,
                            CurrencyCode = "TRY",
                            IBAN = "TR00000000000134268590",
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("c4ff8586-e24b-4338-9fd5-66f738fe181c"),
                            IsActive = true,
                            Name = "Papara Şirket Hesabı",
                            OpenDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = new Guid("c4ff8586-e24b-4338-9fd5-66f738fe181c")
                        },
                        new
                        {
                            Id = new Guid("16ee5456-47ec-4d8a-ad31-cca8bb558c47"),
                            AccountNumber = 325652192L,
                            Balance = 1000000m,
                            CurrencyCode = "TRY",
                            IBAN = "TR00000000000325652192",
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("c4ff8586-e24b-4338-9fd5-66f738fe181c"),
                            IsActive = true,
                            Name = "Papara Şirket Hesabı-2",
                            OpenDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            UserId = new Guid("defa9635-caee-4682-86bb-c8624fc0488f")
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.AccountTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal?>("CreditAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_amount");

                    b.Property<decimal?>("DebitAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransferType")
                        .HasColumnType("text")
                        .HasColumnName("transfer_type");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.HasKey("Id")
                        .HasName("pk_account_transactions");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_transactions_account_id");

                    b.ToTable("account_transactions", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("ExpenseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expense_date");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("RejectReason")
                        .HasColumnType("text")
                        .HasColumnName("reject_reason");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_expenses");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_expenses_category_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_expenses_user_id");

                    b.ToTable("expenses", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.HasKey("Id")
                        .HasName("pk_expense_categories");

                    b.ToTable("expense_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("16bcc643-b891-4f57-b9ec-ef136a7ac9b0"),
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("9c0156ee-0027-40b2-af58-eb1c6cd8ddf0"),
                            IsActive = true,
                            Name = "transport"
                        },
                        new
                        {
                            Id = new Guid("62e9bb12-e245-49d0-9566-c6e4a59b4200"),
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("9c0156ee-0027-40b2-af58-eb1c6cd8ddf0"),
                            IsActive = true,
                            Name = "Food"
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.ExpenseDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid")
                        .HasColumnName("expense_id");

                    b.Property<string>("FileName")
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.HasKey("Id")
                        .HasName("pk_expense_documents");

                    b.HasIndex("ExpenseId")
                        .HasDatabaseName("ix_expense_documents_expense_id");

                    b.ToTable("expense_documents", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.MoneyTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("FeeAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_amount");

                    b.Property<Guid>("FromAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_account_id");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text")
                        .HasColumnName("reference_number");

                    b.Property<Guid>("ToAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_account_id");

                    b.Property<DateTimeOffset>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.HasKey("Id")
                        .HasName("pk_money_transfers");

                    b.ToTable("money_transfers", (string)null);
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<DateTimeOffset>("InsertedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("inserted_date");

                    b.Property<Guid>("InsertedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("inserted_user");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTimeOffset?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTimeOffset>("OpenDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("open_date");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Secret")
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.Property<DateTimeOffset?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid?>("UpdatedUser")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_user");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4ff8586-e24b-4338-9fd5-66f738fe181c"),
                            AccountId = new Guid("79e18995-ac9a-4d16-848b-40d0b48df92c"),
                            FirstName = "System",
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("c4ff8586-e24b-4338-9fd5-66f738fe181c"),
                            IsActive = true,
                            LastName = "God",
                            OpenDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "97E7F4E9A443A9D04B40D29529A61B2E",
                            Role = 0,
                            Secret = "O55J4J2tAGCerhpCAYRpLhZuoviLyL",
                            UserName = "systemgod"
                        },
                        new
                        {
                            Id = new Guid("defa9635-caee-4682-86bb-c8624fc0488f"),
                            AccountId = new Guid("16ee5456-47ec-4d8a-ad31-cca8bb558c47"),
                            FirstName = "Gonul Su",
                            InsertedDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            InsertedUser = new Guid("defa9635-caee-4682-86bb-c8624fc0488f"),
                            IsActive = true,
                            LastName = "Turkekole",
                            OpenDate = new DateTimeOffset(new DateTime(2025, 4, 22, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Password = "98264BC081EBDF4B396CF8A6CA7C2678",
                            Role = 0,
                            Secret = "VeQJw08QU1LbTOTdYQFL0igVZc2nJa",
                            UserName = "gonulsu"
                        });
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Account", b =>
                {
                    b.HasOne("ExpenseTracker.Persistence.Domain.User", "User")
                        .WithOne("Account")
                        .HasForeignKey("ExpenseTracker.Persistence.Domain.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.AccountTransaction", b =>
                {
                    b.HasOne("ExpenseTracker.Persistence.Domain.Account", "Account")
                        .WithMany("AccountTransactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_transactions_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Expense", b =>
                {
                    b.HasOne("ExpenseTracker.Persistence.Domain.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_expense_categories_category_id");

                    b.HasOne("ExpenseTracker.Persistence.Domain.User", "User")
                        .WithMany("Expenses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_users_user_id");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.ExpenseDocument", b =>
                {
                    b.HasOne("ExpenseTracker.Persistence.Domain.Expense", "Expense")
                        .WithMany("Documents")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_expense_documents_expenses_expense_id");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Account", b =>
                {
                    b.Navigation("AccountTransactions");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.Expense", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("ExpenseTracker.Persistence.Domain.User", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Expenses");
                });
#pragma warning restore 612, 618
        }
    }
}
